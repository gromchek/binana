#include <idc.idc>

static import_functions() {
	// Import function addresses and comments
	msg("Importing function addresses and comments");
	set_func_cmt(0x00401010, "void* operator new(size_t)", 0);
	set_func_cmt(0x00401030, "void operator delete(void*)", 0);
	set_func_cmt(0x00401070, "protected: int __thiscall CDataStore::FetchWrite(unsigned int,unsigned int,char const *,int)", 0);
	set_func_cmt(0x004010D0, "CDataStore::IsRead() const", 0);
	set_func_cmt(0x004010E0, "CDataStore::Reset()", 0);
	set_func_cmt(0x00401130, "CDataStore::Finalize()", 0);
	set_func_cmt(0x00401200, "int __cdecl PatchFiles::qsortpatchfiles(char **, char **)", 0);
	set_func_cmt(0x004038A0, "CDataStore::~CDataStore()", 0);
	set_func_cmt(0x00405A10, "int __cdecl PatchFiles::EnumPatchArchives(OS_FILE_DATA *fileData, PatchOnDemand__Cache *cbParam)", 0);
	set_func_cmt(0x00405AB0, "int __thiscall PatchFiles::LoadArchives(PatchFiles *this, const char *localeCode, char a3)", 0);
	set_func_cmt(0x00427130, "Blizzard::File::Delete(char const*)", 0);
	set_func_cmt(0x00427500, "Blizzard::File::MakeAbsolutePath(char const*, char*, int, bool)", 0);
	set_func_cmt(0x00427560, "Blizzard::File::Move(char const*, char const*)", 0);
	set_func_cmt(0x00427720, "Blizzard::File::Read(Blizzard::File::StreamRecord*, void*, long long, int*, int)", 0);
	set_func_cmt(0x00428300, "WowConnection::AddRef()", 0);
	set_func_cmt(0x00433510, "Blizzard::String::JoinPath(char*, int, char const*, char const*)", 0);
	set_func_cmt(0x0044FA10, "Blizzard::File::RemoveDirectoryAndContents(char const*, bool)::Internal::Callback(Blizzard::File::ProcessDirParms const&)", 0);
	set_func_cmt(0x00454220, "Blizzard::File::SetLastErrorStack(Blizzard::Debug::ErrorStackRecord*)", 0);
	set_func_cmt(0x00465450, "ClientConnection::~ClientConnection()", 0);
	set_func_cmt(0x004666D0, "WowConnection::SetResponse(WowConnectionResponse*, bool)", 0);
	set_func_cmt(0x004667F0, "WowConnection::SetType(WOWC_TYPE)", 0);
	set_func_cmt(0x00466820, "WowConnection::SetEncryption(WC_ENCRYPT_TYPE)", 0);
	set_func_cmt(0x004669D0, "WowConnection::Init(WowConnectionResponse*, void (*)())", 0);
	set_func_cmt(0x00466B50, "WowConnection::Disconnect()", 0);
	set_func_cmt(0x00466BF0, "WowConnection::SetEncryptionKey(unsigned char const*, unsigned char, unsigned char, unsigned char const*, unsigned char)", 0);
	set_func_cmt(0x00466DE0, "WowConnection::CloseSocket(int)", 0);
	set_func_cmt(0x00466F00, "WowConnection::DoStreamReads()", 0);
	set_func_cmt(0x00467270, "WowConnection::WowConnection(int, sockaddr_in*, WowConnectionResponse*)", 0);
	set_func_cmt(0x00467330, "WowConnection::WowConnection(WowConnectionResponse*, void (*)())", 0);
	set_func_cmt(0x004673C0, "WowConnection::~WowConnection()", 0);
	set_func_cmt(0x004675F0, "WowConnection::Send(CDataStore*, int)", 0);
	set_func_cmt(0x00467990, "WowConnection::SendRaw(unsigned char*, int)", 0);
	set_func_cmt(0x00467BA0, "WowConnection::DoMessageReads()", 0);
	set_func_cmt(0x00468200, "WowConnection::Release()", 0);
	set_func_cmt(0x00468250, "WowConnection::DoDisconnect()", 0);
	set_func_cmt(0x00468390, "WowConnection::CheckConnect()", 0);
	set_func_cmt(0x00468580, "WowConnection::CheckAccept()", 0);
	set_func_cmt(0x00468790, "WowConnection::DoWrites()", 0);
	set_func_cmt(0x00468A90, "WowConnection::DoReads()", 0);
	set_func_cmt(0x00468B30, "WowConnection::DoExceptions()", 0);
	set_func_cmt(0x00468BA0, "WowConnection::StartConnect()", 0);
	set_func_cmt(0x00468D20, "WowConnection::Connect(char const*, unsigned short, int)", 0);
	set_func_cmt(0x00468D90, "WowConnection::InitOsNet(bool (*)(NETADDR const*), void (*)(), int, bool)", 0);
	set_func_cmt(0x00468E50, "WowConnection::Connect(char const*, int)", 0);
	set_func_cmt(0x0047ADE0, "CDataStore::GetBufferParams(void const**, unsigned int*, unsigned int*)", 0);
	set_func_cmt(0x0047AE10, "CDataStore::DetachBuffer(void**, unsigned int*, unsigned int*)", 0);
	set_func_cmt(0x0047AE50, "virtual void __thiscall CDataStore::InternalDestroy(unsigned char * &,unsigned int &,unsigned int &)", 0);
	set_func_cmt(0x0047AEA0, "CDataStore::InternalFetchWrite(unsigned int, unsigned int, unsigned char*&, unsigned int&, unsigned int&, char const*, int)", 0);
	set_func_cmt(0x0047AF40, "CDataStore::Set(unsigned int, unsigned short)", 0);
	set_func_cmt(0x0047AFE0, "CDataStore::Put(unsigned char)", 0);
	set_func_cmt(0x0047B040, "CDataStore::Put(unsigned short)", 0);
	set_func_cmt(0x0047B0A0, "CDataStore::Put(unsigned int)", 0);
	set_func_cmt(0x0047B100, "CDataStore::Put(unsigned long long)", 0);
	set_func_cmt(0x0047B1C0, "CDataStore::PutArray(unsigned char const*, unsigned int)", 0);
	set_func_cmt(0x0047B280, "CDataStore::PutData(void const*, unsigned long)", 0);
	set_func_cmt(0x0047B290, "CDataStore::FetchRead(unsigned int, unsigned int)", 0);
	set_func_cmt(0x0047B300, "CDataStore::PutString(char const*)", 0);
	set_func_cmt(0x0047B340, "CDataStore::Get(unsigned char&)", 0);
	set_func_cmt(0x0047B380, "CDataStore::Get(unsigned short&)", 0);
	set_func_cmt(0x0047B3C0, "CDataStore::Get(unsigned int&)", 0);
	set_func_cmt(0x0047B400, "CDataStore::Get(unsigned long long&)", 0);
	set_func_cmt(0x0047B440, "CDataStore::Get(float&)", 0);
	set_func_cmt(0x0047B480, "CDataStore::GetString(char*, unsigned int)", 0);
	set_func_cmt(0x0047B560, "CDataStore::GetArray(unsigned char*, unsigned int)", 0);
	set_func_cmt(0x0047B6B0, "CDataStore::GetDataInSitu(void*&, unsigned int)", 0);
	set_func_cmt(0x0047B800, "void __cdecl quicksort(unsigned int, unsigned int, int, int (__cdecl *)(unsigned int, unsigned int, int), int)", 0);
	set_func_cmt(0x0047BD40, "int __cdecl sgetu8(_BYTE *, _DWORD *)", 0);
	set_func_cmt(0x0047F230, "IEvtSchedulerProcess as an independent function appears to be optimized out", 0);
	set_func_cmt(0x00481590, "CSimpleTexture::SetTexture(CImVector const&)", 0);
	set_func_cmt(0x00481620, "CSimpleTexture::SetBlendMode(EGxBlend)", 0);
	set_func_cmt(0x00481640, "CSimpleTexture::SetTexCoord(C2Vector const*)", 0);
	set_func_cmt(0x004831D0, "CSimpleTexture::SetTexCoord(CRect const&)", 0);
	set_func_cmt(0x00484470, "CSimpleTexture::CSimpleTexture(CSimpleFrame*, unsigned int, int)", 0);
	set_func_cmt(0x00485F40, "CSimpleTexture::LoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x00488CF0, "CLayoutFrame::IsResizePending()", 0);
	set_func_cmt(0x00488D00, "CLayoutFrame::GetHeight()", 0);
	set_func_cmt(0x00489230, "CLayoutFrame::GetRect(CRect*) const", 0);
	set_func_cmt(0x00489330, "CLayoutFrame::Top()", 0);
	set_func_cmt(0x004893C0, "CLayoutFrame::CalculateRect(CAaRect*)", 0);
	set_func_cmt(0x00489570, "CLayoutFrame::OnFrameResize()", 0);
	set_func_cmt(0x004896C0, "CLayoutFrame::SetProtectFlag(unsigned int)", 0);
	set_func_cmt(0x004898B0, "CLayoutFrame::ResizePending()", 0);
	set_func_cmt(0x00489C30, "CLayoutFrame::RegisterResize(CLayoutFrame*, unsigned int)", 0);
	set_func_cmt(0x00489D70, "CLayoutFrame::UnregisterResize(CLayoutFrame*, unsigned int)", 0);
	set_func_cmt(0x00489DE0, "CLayoutFrame::Resize(int)", 0);
	set_func_cmt(0x00489E90, "CLayoutFrame::SetLayoutScale(float, bool)", 0);
	set_func_cmt(0x0048A1D0, "CLayoutFrame::OnFrameSizeChanged(CAaRect const&)", 0);
	set_func_cmt(0x0048A260, "CLayoutFrame::SetPoint(FRAMEPOINT, CLayoutFrame*, FRAMEPOINT, float, float, int)", 0);
	set_func_cmt(0x0048A510, "CLayoutFrame::ClearAllPoints()", 0);
	set_func_cmt(0x0048A520, "CLayoutFrame::SetDeferredResize(int)", 0);
	set_func_cmt(0x0048B130, "CLayoutFrame::DestroyLayout()", 0);
	set_func_cmt(0x0048C1C0, "CSimpleTexture_SetVertexColor(lua_State*)", 0);
	set_func_cmt(0x0048C3E0, "CSimpleTexture_SetAlpha(lua_State*)", 0);
	set_func_cmt(0x0048E170, "CSimpleTexture_SetTexCoord(lua_State*)", 0);
	set_func_cmt(0x0048E680, "CSimpleFrame::GetScriptByName(char const*, FrameScript_Object::ScriptData&)", 0);
	set_func_cmt(0x0048E9A0, "CSimpleFrame::Raise()", 0);
	set_func_cmt(0x0048EA10, "CSimpleFrame::SetFrameAlpha(unsigned char)", 0);
	set_func_cmt(0x0048EA80, "CSimpleFrame::UnregisterForEvents(int)", 0);
	set_func_cmt(0x0048F580, "CSimpleFrame::SetFrameScale(float, bool)", 0);
	set_func_cmt(0x0048F6A0, "CSimpleFrame::EnableEvent(CSimpleEventType, unsigned int)", 0);
	set_func_cmt(0x0048F890, "CSimpleFrame::GetHitRect(CRect&)", 0);
	set_func_cmt(0x0048FA20, "CSimpleFrame::OnFrameSizeChanged(CAaRect const&)", 0);
	set_func_cmt(0x0048FEA0, "CSimpleFrame::NotifyScrollParent()", 0);
	set_func_cmt(0x00490270, "CSimpleFrame::NotifyDrawLayerChanged(unsigned int)", 0);
	set_func_cmt(0x00490330, "CSimpleFrame::OnFrameSizeChanged(float, float)", 0);
	set_func_cmt(0x00490410, "CSimpleFrame::PostLoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x004905A0, "CSimpleFrame::SetBackdrop(CBackdropGenerator*)", 0);
	set_func_cmt(0x00490770, "CSimpleFrame::OnLayerUpdate(float)", 0);
	set_func_cmt(0x00490840, "CSimpleFrame::OnFrameRender(CRenderBatch*, unsigned int)", 0);
	set_func_cmt(0x004908A0, "CSimpleFrame::OnScreenSizeChanged()", 0);
	set_func_cmt(0x00490F60, "CSimpleFrame::SetBeingScrolled(int, int)", 0);
	set_func_cmt(0x00491160, "CSimpleFrame::UnparentFrame(CSimpleFrame*)", 0);
	set_func_cmt(0x004911B0, "CSimpleFrame::SetParent(CSimpleFrame*)", 0);
	set_func_cmt(0x004913C0, "CSimpleFrame::GetBoundsRect(CRect&)", 0);
	set_func_cmt(0x004915A0, "CSimpleFrame::UpdateScale(bool)", 0);
	set_func_cmt(0x00491830, "CSimpleFrame::HideThis()", 0);
	set_func_cmt(0x004918F0, "CSimpleFrame::ShowThis(bool)", 0);
	set_func_cmt(0x00491E00, "CSimpleFrame::OnFrameRender()", 0);
	set_func_cmt(0x004922F0, "CSimpleFrame::CSimpleFrame(CSimpleFrame*)", 0);
	set_func_cmt(0x004932C0, "CSimpleFrame::LoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x00493E00, "CSimpleTop::RoundToPixelHeight(float)", 0);
	set_func_cmt(0x00493F30, "CSimpleTop::HideFrame(CSimpleFrame*, int)", 0);
	set_func_cmt(0x004945A0, "CSimpleTop::OnMouseMove(EVENT_DATA_MOUSE const*, void*)", 0);
	set_func_cmt(0x00494FA0, "CSimpleTop::UnregisterFrame(CSimpleFrame*)", 0);
	set_func_cmt(0x004955E0, "CSimpleTop::OnDisplaySizeChanged(EVENT_DATA_SIZE const*, void*)", 0);
	set_func_cmt(0x00495880, "CSimpleTop::RegisterForEvent(CSimpleFrame*, CSimpleEventType, int, unsigned int)", 0);
	set_func_cmt(0x004959F0, "CSimpleTop::EnableEvents()", 0);
	set_func_cmt(0x00495EB0, "CSimpleTop::CSimpleTop()", 0);
	set_func_cmt(0x004960D0, "CSimpleTop::ShowFrame(CSimpleFrame*, int)", 0);
	set_func_cmt(0x0049E540, "CSimpleFrame::RegisterScriptMethods(lua_State*)", 0);
	set_func_cmt(0x004A2780, "_CBackdropGenerator::LoadXML(linkObject*, CStatus*)", 0);
	set_func_cmt(0x004A81B0, "FrameScript_GetObjectThis(lua_State*, int)", 0);
	set_func_cmt(0x004B9B20, "AsyncFileReadPollHandler(void const*, void*)", 0);
	set_func_cmt(0x004B9DE0, "AsyncFileReadDestroyObject(CAsyncObject*)", 0);
	set_func_cmt(0x004B9EA0, "AsyncFileReadCancel(CAsyncObject*, void (*)(CAsyncObject*))", 0);
	set_func_cmt(0x004BA060, "AsyncFileReadWait(CAsyncObject*)", 0);
	set_func_cmt(0x004BAA40, "AsyncFileReadInitialize(unsigned int, unsigned int)", 0);
	set_func_cmt(0x004BAB50, "AsyncFileReadObject(CAsyncObject*, int)", 0);
	set_func_cmt(0x004DBFD0, "thanks namreeb :^)", 0);
	set_func_cmt(0x004DE960, "CRealmList::SetPreferredInfo(unsigned int, int, int)", 0);
	set_func_cmt(0x004DF580, "CRealmList::Initialize()", 0);
	set_func_cmt(0x004DF710, "CRealmList::UpdateList()", 0);
	set_func_cmt(0x004E5ED0, "CSimpleModelFFX::SetModel(CM2Model*)", 0);
	set_func_cmt(0x004E5F00, "CSimpleModelFFX::LoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x004E5F70, "CSimpleModelFFX::CSimpleModelFFX(CSimpleFrame*)", 0);
	set_func_cmt(0x004E6190, "CSimpleModelFFX::Render(void*)", 0);
	set_func_cmt(0x004E6300, "CSimpleModelFFX::Create(CSimpleFrame*)", 0);
	set_func_cmt(0x004E6330, "CSimpleModelFFX::OnFrameRender(CRenderBatch*, unsigned int)", 0);
	set_func_cmt(0x004E6F60, "CSimpleModelFFX::CreateScriptMetaTable()", 0);
	set_func_cmt(0x00532AF0, "public: class CGxCaps const & __thiscall CGxDevice::Caps(void)const", 0);
	set_func_cmt(0x005EEB70, "SErrDisplayAppFatal resolves to this in release mode?", 0);
	set_func_cmt(0x00631D30, "00005400", 0);
	set_func_cmt(0x00631E10, "NetClient::ConnectInternal(char const*, unsigned short)", 0);
	set_func_cmt(0x00631EA0, "00005400", 0);
	set_func_cmt(0x00631F70, "NetClient::SetLoginData(LoginData*)", 0);
	set_func_cmt(0x00631FA0, "void __thiscall NetClient::SetMessageHandler(enum NETMESSAGE, int (__fastcall *)(void *, enum NETMESSAGE, unsigned long, class CDataStore *), void *)", 0);
	set_func_cmt(0x00631FE0, "NetClient::ProcessMessage(unsigned long, CDataStore*, int)", 0);
	set_func_cmt(0x00632060, "NetClient::WCConnected(WowConnection*, WowConnection*, unsigned long, NETCONNADDR const*)", 0);
	set_func_cmt(0x006320D0, "void __thiscall NetClient::GetNetStats(float &, float &, unsigned long &)", 0);
	set_func_cmt(0x006321A0, "00005400", 0);
	set_func_cmt(0x006322A0, "00005400", 0);
	set_func_cmt(0x00632390, "00005400", 0);
	set_func_cmt(0x006323C0, "NetClient::Connect(char const*)", 0);
	set_func_cmt(0x00632460, "NetClient::HandleData(unsigned long, void*, int)", 0);
	set_func_cmt(0x00632510, "00005400", 0);
	set_func_cmt(0x00632540, "00005400", 0);
	set_func_cmt(0x006325C0, "void __thiscall NetClient::PongHandler(class CDataStore *)", 0);
	set_func_cmt(0x006326D0, "NetClient::WCDisconnected(WowConnection*, unsigned long, NETCONNADDR const*)", 0);
	set_func_cmt(0x00632730, "00005410", 0);
	set_func_cmt(0x00632A40, "00005410", 0);
	set_func_cmt(0x00632B50, "NetClient::Send(CDataStore*)", 0);
	set_func_cmt(0x00632C10, "NetClient::WCCantConnect(WowConnection*, unsigned long, NETCONNADDR const*)", 0);
	set_func_cmt(0x00632CD0, "NetClient::Ping(CONNECTION_ID)", 0);
	set_func_cmt(0x00632DB0, "00005400", 0);
	set_func_cmt(0x00632E00, "00005410", 0);
	set_func_cmt(0x00633330, "NetClient::WCMessageReady(WowConnection*, unsigned long, CDataStore*)", 0);
	set_func_cmt(0x00633440, "NETEVENTQUEUE::NETEVENTQUEUE(NetClient*)", 0);
	set_func_cmt(0x006334F0, "NETEVENTQUEUE::Poll()", 0);
	set_func_cmt(0x00633650, "NETEVENTQUEUE::AddEvent(EVENTID, void*, NetClient*, void const*, unsigned long)", 0);
	set_func_cmt(0x00633730, "NETEVENTQUEUE::~NETEVENTQUEUE()", 0);
	set_func_cmt(0x006337D0, "00005400", 0);
	set_func_cmt(0x00634C60, "00005400", 0);
	set_func_cmt(0x00634E00, "ClientDBInitialize()", 0);
	set_func_cmt(0x00636E50, "WowClientDB<AchievementRec>::Load(char const, int)", 0);
	set_func_cmt(0x006393A0, "WowClientDB<Cfg_CategoriesRec>::Load(char const, int)", 0);
	set_func_cmt(0x006395F0, "WowClientDB<Cfg_ConfigsRec>::Load(char const, int)", 0);
	set_func_cmt(0x00639840, "WowClientDB<CharBaseInfoRec>::Load(char const, int)", 0);
	set_func_cmt(0x00658D90, "WowClientDB<AchievementRec>::LoadRecords(SFile*, char const*, int)", 0);
	set_func_cmt(0x00659910, "WowClientDB<Cfg_CategoriesRec>::LoadRecords(SFile*, char const*, int)", 0);
	set_func_cmt(0x00659B80, "WowClientDB<CharBaseInfoRec>::LoadRecords(SFile*, char const*, int)", 0);
	set_func_cmt(0x0065C290, "00005410", 0);
	set_func_cmt(0x0065F520, "WowClientDB<AchievementRec>::GetRecordByIndex(int, void*)", 0);
	set_func_cmt(0x006811D0, "00005410", 0);
	set_func_cmt(0x006811F0, "GxAdapterID(unsigned short&, unsigned short&, unsigned int&, unsigned int&)", 0);
	set_func_cmt(0x00681BE0, "UC", 0);
	set_func_cmt(0x00682400, "this is one of the functions named 'GxPrimVertexPtr' that uses the fixed-function pipeline", 0);
	set_func_cmt(0x00683670, "static void CGxDevice::LogOpen(void)", 0);
	set_func_cmt(0x00684C40, "CGxDevice::Log(CGxCaps const&) const", 0);
	set_func_cmt(0x006859E0, "CGxDevice::IRsForceUpdate(EGxRenderState)", 0);
	set_func_cmt(0x00685A70, "CGxDevice::IRsForceUpdate()", 0);
	set_func_cmt(0x00689EA0, "UC", 0);
	set_func_cmt(0x0068E140, "void CGxDeviceD3d::IUnloadD3dLib(HINSTANCE& d3dLib, LPDIRECT3D9& d3d)", 0);
	set_func_cmt(0x0068E180, "LPDIRECT3DINDEXBUFFER9 CGxDeviceD3d::ICreateD3dIB(EGxPoolUsage usage, uint32_t size)", 0);
	set_func_cmt(0x0068E250, "void CGxDeviceD3d::ISetPresentParms(D3DPRESENT_PARAMETERS& d3dpp, const CGxFormat& format)", 0);
	set_func_cmt(0x0069FE10, "UC (invented name)", 0);
	set_func_cmt(0x006AA350, "UC", 0);
	set_func_cmt(0x006AA420, "private utility method", 0);
	set_func_cmt(0x006AB390, "public method", 0);
	set_func_cmt(0x006B0940, "ClientConnection::Disconnect(DISCONNECT_REASON)", 0);
	set_func_cmt(0x006B1100, "ClientConnection::PollStatus(WOWCS_OPS&, char const**, int&, int&)", 0);
	set_func_cmt(0x006B1200, "ClientConnection::Cancel(int)", 0);
	set_func_cmt(0x006B1260, "ClientConnection::HandleConnect()", 0);
	set_func_cmt(0x006B1390, "ClientConnection::Connect()", 0);
	set_func_cmt(0x006B14C0, "ClientConnection::GetCharacterList()", 0);
	set_func_cmt(0x006C5E90, "CGxString::WriteGeometry(CGxVertexPCT*, int, int, int) const", 0);
	set_func_cmt(0x006C6190, "CGxString::InitializeViewTranslation()", 0);
	set_func_cmt(0x006C6410, "CGxString::SetStringPosition(C3Vector const&)", 0);
	set_func_cmt(0x006C6A70, "CGxString::AddHyperlinkParseInfo(GXUFONTHYPERLINKINFO)", 0);
	set_func_cmt(0x006C6B90, "CGxString::ClearInstanceData()", 0);
	set_func_cmt(0x006C6C00, "CGxString::Tick()", 0);
	set_func_cmt(0x006C6CD0, "CGxString::InitializeTextLine(char const*, unsigned int, CImVector&, C3Vector const&, unsigned int*, EMBEDDEDPARSEINFO&)", 0);
	set_func_cmt(0x006C7440, "CGxString::AddShadow(C2Vector const&, CImVector const&)", 0);
	set_func_cmt(0x006C7480, "CGxString::CheckGeometry()", 0);
	set_func_cmt(0x006C75E0, "CGxString::Recycle()", 0);
	set_func_cmt(0x006C7760, "CGxString::~CGxString()", 0);
	set_func_cmt(0x006C78F0, "CGxString::SetGradient(int, int)", 0);
	set_func_cmt(0x006C7AA0, "CGxString::GetNewString(int)", 0);
	set_func_cmt(0x006C7B10, "CGxString::CreateGeometry()", 0);
	set_func_cmt(0x006CA180, "SHA1::Process(void const*, unsigned int)", 0);
	set_func_cmt(0x006CA270, "SHA1::Finish(SHA1::Digest&)", 0);
	set_func_cmt(0x006CB5F0, "SHA1_Init(SHA1_CONTEXT*)", 0);
	set_func_cmt(0x006CB630, "SHA1_Update(SHA1_CONTEXT*, unsigned char const*, unsigned int)", 0);
	set_func_cmt(0x006CB6F0, "SHA1_Final(unsigned char*, SHA1_CONTEXT*)", 0);
	set_func_cmt(0x006CB7C0, "SHA1_InterleaveHash(unsigned char*, unsigned char const*, unsigned int)", 0);
	set_func_cmt(0x00763730, "UC", 0);
	set_func_cmt(0x00763AB0, "static void CONSOLELINE::Backspace()", 0);
	set_func_cmt(0x00763B10, "void CONSOLELINE::Delete()", 0);
	set_func_cmt(0x00763B40, "static void CONSOLELINE::Up()", 0);
	set_func_cmt(0x00763B90, "static void CONSOLELINE::Down()", 0);
	set_func_cmt(0x007663F0, "CVar::ArchiveCodeRegisteredOnly()", 0);
	set_func_cmt(0x007666B0, "CVar::LogCvar(char const*, char const*, void*)", 0);
	set_func_cmt(0x007667B0, "CVar::InternalSet(char const*, bool, bool, bool, bool)", 0);
	set_func_cmt(0x00766990, "public: void __thiscall CVar::Reset(void)", 0);
	set_func_cmt(0x00766A20, "public: bool __thiscall CVar::Default(void)", 0);
	set_func_cmt(0x00766AB0, "CVar::Update()", 0);
	set_func_cmt(0x00767030, "CVar::IterateForArchive(unsigned int, unsigned int, int (*)(char const*, char const*, void*), void*)", 0);
	set_func_cmt(0x007671A0, "CVar::LogAll(char*, unsigned long, unsigned int, unsigned int)", 0);
	set_func_cmt(0x00767220, "00005410", 0);
	set_func_cmt(0x007673A0, "00005400", 0);
	set_func_cmt(0x00767440, "CVar::Lookup(char const*)", 0);
	set_func_cmt(0x007698B0, "00005400", 0);
	set_func_cmt(0x00769950, "SetGxCVars(CGxFormat const&)", 0);
	set_func_cmt(0x00769D40, "00005400", 0);
	set_func_cmt(0x0076B3F0, "void SetDefaults(DefaultSettings&, const Hardware&)", 0);
	set_func_cmt(0x0076B520, "ConsoleDetectSetDefaultsFormat(DefaultSettings&, const Hardware&)", 0);
	set_func_cmt(0x0076BA30, "ConsoleDetectDetectHardware(Hardware&, bool&)", 0);
	set_func_cmt(0x00779340, "00005410", 0);
	set_func_cmt(0x00779A30, "00005410", 0);
	set_func_cmt(0x00779AE0, "00005410", 0);
	set_func_cmt(0x0077AAA0, "SHA1::Prepare()", 0);
	set_func_cmt(0x0077ACF0, "public: unsigned int __thiscall BigBuffer::operator[](unsigned int)const", 0);
	set_func_cmt(0x0077AE80, "public: __thiscall BigStack::~BigStack(void)", 0);
	set_func_cmt(0x0077AEC0, "public: unsigned int & __thiscall BigBuffer::operator[](unsigned int)const", 0);
	set_func_cmt(0x0077AF80, "public: void __thiscall BigBuffer::Trim(void)const", 0);
	set_func_cmt(0x0077B020, "void Add(class BigBuffer &,class BigBuffer const &,class BigBuffer const &)", 0);
	set_func_cmt(0x0077B160, "void Div(class BigBuffer &,unsigned int *,class BigBuffer const &,unsigned __int64)", 0);
	set_func_cmt(0x0077B2B0, "void Mul(class BigBuffer &,class BigBuffer const &,unsigned __int64)", 0);
	set_func_cmt(0x0077B3E0, "void Sub(class BigBuffer &,class BigBuffer const &,class BigBuffer const &)", 0);
	set_func_cmt(0x0077B590, "void Shl(class BigBuffer &,class BigBuffer const &,unsigned int)", 0);
	set_func_cmt(0x0077B700, "void Shl(class BigBuffer &,class BigBuffer const &,unsigned int)", 0);
	set_func_cmt(0x0077B7F0, "void FromBinary(class BigBuffer &,void const *,unsigned int)", 0);
	set_func_cmt(0x0077B8B0, "void FromUnsigned(class BigBuffer &,unsigned int)", 0);
	set_func_cmt(0x0077B910, "_ToBinaryAppend(TSGrowableArray<unsigned char>&, BigBuffer const&)", 0);
	set_func_cmt(0x0077BAC0, "void __fastcall Div(class BigBuffer &,class BigBuffer &,class BigBuffer const &,class BigBuffer const &,class BigStack &)", 0);
	set_func_cmt(0x0077BFF0, "void Mul(class BigBuffer &,class BigBuffer const &,class BigBuffer const &,class BigStack &)", 0);
	set_func_cmt(0x0077C330, "void __fastcall Square(class BigBuffer &,class BigBuffer const &,class BigStack &)", 0);
	set_func_cmt(0x007816F0, "DayNight::Update(unsigned int, float, float)", 0);
	set_func_cmt(0x007AE300, "CMapObj::Init()", 0);
	set_func_cmt(0x007B0580, "CMapObj::CMapObj()", 0);
	set_func_cmt(0x007B0CC0, "CMapObj::Create(char const*)", 0);
	set_func_cmt(0x007B1270, "CDetailDoodad::UpdateAlphaRampTexture(EGxTexCommand, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&, void const*&)", 0);
	set_func_cmt(0x007B15D0, "CDetailDoodad::InitializeShaderConstants()", 0);
	set_func_cmt(0x007B2760, "CDetailDoodad::Initialize()", 0);
	set_func_cmt(0x007B2D30, "CDetailDoodad::InitializeRenderState()", 0);
	set_func_cmt(0x007B5020, "00005410", 0);
	set_func_cmt(0x007BF8B0, "CMap::LoadWdt()", 0);
	set_func_cmt(0x007BFCE0, "public: static void __cdecl CMap::Load(char const *, int)", 0);
	set_func_cmt(0x007BFF20, "CMap::AllocMapObj()", 0);
	set_func_cmt(0x007C08A0, "public: static class CMapLight * __fastcall CMap::AllocLight(void)", 0);
	set_func_cmt(0x007C1150, "CMapDoodadDef::SelectLights(CM2Lighting*)", 0);
	set_func_cmt(0x007C1730, "CMapEntity::SelectLights(CM2Lighting*)", 0);
	set_func_cmt(0x007C65A0, "public: void __thiscall CMapChunk::UpdateLights(void)", 0);
	set_func_cmt(0x007D7260, "CMapBaseObj::CMapBaseObj()", 0);
	set_func_cmt(0x007D80C0, "CMapObj::Read(char const*)", 0);
	set_func_cmt(0x007D9B10, "public: __thiscall CMapLight::CMapLight(void)", 0);
	set_func_cmt(0x007D9BD0, "CMap::CreateLight(bool, bool)", 0);
	set_func_cmt(0x007D9C80, "public: static void __cdecl CMap::UpdateLightBounds(class CMapLight *)", 0);
	set_func_cmt(0x007D9D50, "public: static void __cdecl CMap::EnableLight(class CMapLight *)", 0);
	set_func_cmt(0x007D9D70, "public: static void __cdecl CMap::DestroyLight(class CMapLight *)", 0);
	set_func_cmt(0x007D9DE0, "CMap::LinkLightToChunks(class CMapLight *)", 0);
	set_func_cmt(0x007D9F90, "CMap::LinkLightToMapObjDefs(class CMapLight *)", 0);
	set_func_cmt(0x007DA100, "CMap::UpdateLight(class CMapLight *)", 0);
	set_func_cmt(0x007DA420, "WardenClient_Destroy()", 0);
	set_func_cmt(0x007DA8C0, "WardenClient_Initialize()", 0);
	set_func_cmt(0x007ECD00, "DayNight::CalcFogRate(float, float)", 0);
	set_func_cmt(0x007ECEC0, "DayNight::SetOverrideLightParamsID(int)", 0);
	set_func_cmt(0x007ECEE0, "DayNight::ClearOverrideLightParamsID()", 0);
	set_func_cmt(0x007ED3B0, "DayNight::InterpTable(C2Vector const*, unsigned int, float)", 0);
	set_func_cmt(0x007ED820, "DayNight::ClearOverrideFog()", 0);
	set_func_cmt(0x007ED870, "DayNight::SetOverrideFog(float, float, CImVector, int)", 0);
	set_func_cmt(0x007EEA90, "DayNight::SetDirection()", 0);
	set_func_cmt(0x007EECC0, "DayNight::SetPlanets()", 0);
	set_func_cmt(0x007F16F0, "DayNight::UpdateFog()", 0);
	set_func_cmt(0x007F3230, "DayNight::SetColors()", 0);
	set_func_cmt(0x007F3920, "DayNight::UpdateLighting()", 0);
	set_func_cmt(0x00812B90, "FrameXML_FreeHashNodes()", 0);
	set_func_cmt(0x00816790, "FrameScript_Object::CreateScriptMetaTable(lua_State*, void (*)(lua_State*))", 0);
	set_func_cmt(0x008167E0, "FrameScript_Object::FillScriptMethodTable(lua_State*, FrameScript_Method*, int)", 0);
	set_func_cmt(0x00818070, "startIndex is the index of starting argument on stack", 0);
	set_func_cmt(0x00819830, "FrameScript_Object::FrameScript_Object()", 0);
	set_func_cmt(0x00819850, "FrameScript_Object::~FrameScript_Object()", 0);
	set_func_cmt(0x008199C0, "FrameScript_Object::UnregisterScriptObject(char const*)", 0);
	set_func_cmt(0x0081A2C0, "FrameScript_Object__RunScript(FrameScript_Object::ScriptIx const&, int, char const*)", 0);
	set_func_cmt(0x0081AA00, "FrameScript_SignalEvent(unsigned int, lua_State*, int)", 0);
	set_func_cmt(0x0081AC90, "vFrameScript_SignalEvent(unsigned int, char const*, char*)", 0);
	set_func_cmt(0x0081B530, "FrameScript_SignalEvent(unsigned int, char const*, ...)", 0);
	set_func_cmt(0x0081B5F0, "FrameScript_CreateEvents(char const**, unsigned int)", 0);
	set_func_cmt(0x0081BFA0, "CM2Cache::BeginThread(void (*)(void*), void*)", 0);
	set_func_cmt(0x0081BFD0, "CM2Cache::WaitThread()", 0);
	set_func_cmt(0x0081BFE0, "CM2Cache::ThreadProc(void*)", 0);
	set_func_cmt(0x0081C0D0, "CM2Cache::Initialize(unsigned int)", 0);
	set_func_cmt(0x0081C290, "CM2Cache::GarbageCollect(int)", 0);
	set_func_cmt(0x0081C300, "CM2Cache::Destroy()", 0);
	set_func_cmt(0x0081C390, "CM2Cache::CreateShared(char const*, unsigned int)", 0);
	set_func_cmt(0x0081C790, "CM2Cache::UpdateShared()", 0);
	set_func_cmt(0x0081C840, "CM2Cache::LinkToSharedUpdateList(CM2Shared*)", 0);
	set_func_cmt(0x0081C900, "CM2Cache::CM2Cache()", 0);
	set_func_cmt(0x0081C9C0, "CM2Scene::AdvanceTime(unsigned int)", 0);
	set_func_cmt(0x0081CE70, "CM2Scene::AnimateThread(void*)", 0);
	set_func_cmt(0x0081E400, "CM2Scene::SelectLights(CM2Lighting*)", 0);
	set_func_cmt(0x0081EA90, "CM2Scene::SortDoodadProxy(unsigned int, unsigned int, void const*)", 0);
	set_func_cmt(0x0081EAD0, "CM2Scene::SortOpaqueGeoBatches(M2Element*, M2Element*)", 0);
	set_func_cmt(0x0081ED10, "CM2Scene::SortOpaqueRibbons(M2Element*, M2Element*)", 0);
	set_func_cmt(0x0081EDF0, "CM2Scene::SortOpaqueParticles(M2Element*, M2Element*)", 0);
	set_func_cmt(0x0081EEA0, "CM2Scene::SortOpaque(unsigned int, unsigned int, void const*)", 0);
	set_func_cmt(0x0081EF30, "CM2Scene::SortTransparent(unsigned int, unsigned int, void const*)", 0);
	set_func_cmt(0x0081F0E0, "CM2Scene::SortAdditiveParticles(unsigned int, unsigned int, void const*)", 0);
	set_func_cmt(0x0081F1D0, "CM2Scene::ComputeElementShaders(M2Element*)", 0);
	set_func_cmt(0x0081F330, "CM2SceneRender::CM2SceneRender(CM2Scene*)", 0);
	set_func_cmt(0x0081F450, "CM2SceneRender::SetupTextures()", 0);
	set_func_cmt(0x0081F700, "CM2SceneRender::SetBatchVertices(int)", 0);
	set_func_cmt(0x0081F8F0, "CM2Scene::CreateModel(char const*, unsigned int)", 0);
	set_func_cmt(0x0081F970, "CM2Scene::DuplicateModel(CM2Model*, unsigned int)", 0);
	set_func_cmt(0x0081F9E0, "CM2Scene::SortAdditiveParticleElements(unsigned int)", 0);
	set_func_cmt(0x0081FB10, "CM2SceneRender::SetupLighting()", 0);
	set_func_cmt(0x0081FE90, "CM2SceneRender::SetupMaterial()", 0);
	set_func_cmt(0x008203B0, "CM2SceneRender::DrawBatch()", 0);
	set_func_cmt(0x00820720, "CM2SceneRender::DrawBatchProj()", 0);
	set_func_cmt(0x00820AE0, "CM2SceneRender::DrawBatchDoodad(M2Element*, unsigned int*)", 0);
	set_func_cmt(0x00820F40, "CM2SceneRender::DrawRibbon()", 0);
	set_func_cmt(0x008214E0, "CM2SceneRender::DrawParticle(unsigned int, M2Element*, unsigned int*, unsigned int)", 0);
	set_func_cmt(0x008216C0, "CM2Scene::CM2Scene(CM2Cache*)", 0);
	set_func_cmt(0x00821850, "CM2Scene::~CM2Scene()", 0);
	set_func_cmt(0x00821A20, "CM2Scene::Animate(C3Vector const&)", 0);
	set_func_cmt(0x00823040, "CM2Scene::Release()", 0);
	set_func_cmt(0x008230D0, "CM2SceneRender::DrawCallback()", 0);
	set_func_cmt(0x00823130, "CM2SceneRender::Draw(M2PASS, M2Element*, unsigned int*, unsigned int*)", 0);
	set_func_cmt(0x00823CB0, "CM2Scene::Draw(M2PASS)", 0);
	set_func_cmt(0x00823ED0, "CM2Model::WaitForLoad(char const*)", 0);
	set_func_cmt(0x00823F10, "CM2Model::SetAnimating(int)", 0);
	set_func_cmt(0x00823FE0, "CM2Model::SetSequenceCallback(void (*)(CM2Model*, unsigned int, unsigned int, int, unsigned int, unsigned long long, int), unsigned long long)", 0);
	set_func_cmt(0x00824060, "CM2Model::SetEventCallback(void (*)(CM2Model*, unsigned int, unsigned int, unsigned int, C3Vector const&, unsigned int, unsigned long long), unsigned long long)", 0);
	set_func_cmt(0x00824170, "CM2Model::GetCameraByIndex(unsigned int)", 0);
	set_func_cmt(0x008244F0, "CM2Model::LinkToCallbackListTail()", 0);
	set_func_cmt(0x00824510, "CM2Model::UnlinkFromCallbackList()", 0);
	set_func_cmt(0x00824550, "CM2Model::IsBatchDoodadCompatible(M2Batch*) const", 0);
	set_func_cmt(0x00824ED0, "CM2Model::Release()", 0);
	set_func_cmt(0x00824F00, "CM2Model::IsLoaded(int, int)", 0);
	set_func_cmt(0x00824FC0, "CM2Model::IsDrawable(int, int)", 0);
	set_func_cmt(0x00825170, "CM2Model::UpdateLoaded()", 0);
	set_func_cmt(0x008251B0, "CM2Model::SetLoadedCallback(void (*)(CM2Model*, void*), void*)", 0);
	set_func_cmt(0x008251D0, "CM2Model::SetWorldTransform(C3Vector const&, float, float)", 0);
	set_func_cmt(0x00825D70, "CM2Model::UnoptimizeVisibleGeometry()", 0);
	set_func_cmt(0x00826350, "CM2Model::SequenceFallbackById(M2SequenceFallback*, unsigned int) const", 0);
	set_func_cmt(0x00826B00, "CM2Model::SetupBoneSequence(unsigned short, M2SequenceFallback, unsigned int, float, M2ModelBoneSeq*)", 0);
	set_func_cmt(0x00826C40, "CM2Model::SetPrimaryBoneSequence(unsigned short, unsigned short, M2SequenceFallback, unsigned int, float, int)", 0);
	set_func_cmt(0x00826DD0, "CM2Model::SetSecondaryBoneSequence(unsigned short, unsigned short, M2SequenceFallback, unsigned int, float)", 0);
	set_func_cmt(0x00827560, "CM2Model::DetachAllChildrenById(unsigned int)", 0);
	set_func_cmt(0x00827960, "CM2Model::GetCameraById(unsigned int)", 0);
	set_func_cmt(0x008284D0, "CM2Model::FindKey(M2ModelBoneSeq*, M2TrackBase const&, unsigned int&, unsigned int&, float&)", 0);
	set_func_cmt(0x00828A00, "CM2Model::AnimateST()", 0);
	set_func_cmt(0x00828F90, "CM2Model::SetIndices() const", 0);
	set_func_cmt(0x00829160, "CM2Model::SetVertices(int, M2SkinSection*, unsigned int) const", 0);
	set_func_cmt(0x00829AA0, "CM2Model::RenderModelBatchesForProjectedTexture()", 0);
	set_func_cmt(0x0082BE60, "CM2Model::CM2Model()", 0);
	set_func_cmt(0x0082C970, "CM2Model::OptimizeVisibleGeometry()", 0);
	set_func_cmt(0x0082D2F0, "CM2Model::AnimateParticlesMT()", 0);
	set_func_cmt(0x0082D6F0, "CM2Model::AnimateTextureTransformsMT()", 0);
	set_func_cmt(0x0082D910, "CM2Model::SetVerticesMultiSample(int, M2SkinSection*)", 0);
	set_func_cmt(0x0082DD80, "CM2Model::SetWorldTransform(C3Vector const&, float, float, C3Vector const&, unsigned int)", 0);
	set_func_cmt(0x0082E140, "CM2Model::AnimateMTSimple(C44Matrix const*, C3Vector const&, C3Vector const&, float, float)", 0);
	set_func_cmt(0x0082E550, "CM2Model::AnimateAttachmentsMT()", 0);
	set_func_cmt(0x0082E790, "CM2Model::ProcessSequenceCallback(unsigned int, unsigned int, unsigned int, unsigned int)", 0);
	set_func_cmt(0x0082EC30, "CM2Model::GetCollisionFacets(CAaBox const&, C44Matrix const&, TSGrowableArray<CFacet>&)", 0);
	set_func_cmt(0x0082F0F0, "CM2Model::AnimateMT(C44Matrix const*, C3Vector const&, C3Vector const&, float, float)", 0);
	set_func_cmt(0x008309C0, "CM2Model::AnimateParticleST(float, unsigned int)", 0);
	set_func_cmt(0x00830DC0, "CM2Model::Animate()", 0);
	set_func_cmt(0x00830FB0, "CM2Model::ProcessEventCallbacks(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)", 0);
	set_func_cmt(0x00831410, "CM2Model::GetAttachmentWorldTransform(unsigned int)", 0);
	set_func_cmt(0x00831630, "CM2Model::AttachToParent(CM2Model*, unsigned int, C3Vector const*, int)", 0);
	set_func_cmt(0x00831AF0, "CM2Model::SetupLighting()", 0);
	set_func_cmt(0x00831C30, "CM2Model::SetBoneSequenceDeferred(unsigned short, M2Data*, unsigned short, unsigned int, float, M2SequenceFallback, int, int, int, unsigned int)", 0);
	set_func_cmt(0x00831EC0, "CM2Model::CancelDeferredSequences(unsigned int, bool)", 0);
	set_func_cmt(0x00831FC0, "CM2Model::CallSequenceCallback(M2ModelCallback*)", 0);
	set_func_cmt(0x008321E0, "CM2Model::CallCallbacks()", 0);
	set_func_cmt(0x00832260, "CM2Model::ProcessCallbacks()", 0);
	set_func_cmt(0x00832450, "CM2Model::ProcessCallbacksRecursive()", 0);
	set_func_cmt(0x00832640, "CM2Model::~CM2Model()", 0);
	set_func_cmt(0x00832840, "CM2Model::UnsetBoneSequence(unsigned int, int, int)", 0);
	set_func_cmt(0x00832AB0, "CM2Model::SetBoneSequence(unsigned int, unsigned int, unsigned int, unsigned int, float, int, int)", 0);
	set_func_cmt(0x00832EA0, "CM2Model::InitializeLoaded()", 0);
	set_func_cmt(0x00834540, "CM2Model::AttachToScene(CM2Scene*)", 0);
	set_func_cmt(0x00834630, "CM2Model::AttachToSceneRecursive(CM2Scene*)", 0);
	set_func_cmt(0x00834810, "CM2Model::Initialize(CM2Scene*, CM2Shared*, CM2Model*, unsigned int)", 0);
	set_func_cmt(0x008348D0, "CM2Light::Initialize(CM2Scene*)", 0);
	set_func_cmt(0x00834900, "CM2Lighting::Initialize(CM2Scene*, CAaSphere const&)", 0);
	set_func_cmt(0x00834940, "CM2Lighting::SetFog(C3Vector const&, float, float)", 0);
	set_func_cmt(0x00834990, "CM2Lighting::SetFog(C3Vector const&, float, float, float)", 0);
	set_func_cmt(0x008349E0, "CM2Lighting::GetPointLight(unsigned int, C3Vector&, C3Vector&, C3Vector&)", 0);
	set_func_cmt(0x00834A40, "CM2Light::CM2Light()", 0);
	set_func_cmt(0x00834AB0, "CM2Light::~CM2Light()", 0);
	set_func_cmt(0x00834AE0, "CM2Light::SetDirection(C3Vector const&)", 0);
	set_func_cmt(0x00834C70, "CM2Light::Link()", 0);
	set_func_cmt(0x00834D90, "CM2Lighting::AddAmbient(C3Vector const&)", 0);
	set_func_cmt(0x00834DC0, "CM2Lighting::AddDiffuse(C3Vector const&, C3Vector const&)", 0);
	set_func_cmt(0x00834F60, "CM2Lighting::AddLight(CM2Light*)", 0);
	set_func_cmt(0x008350A0, "CM2Lighting::CameraSpace()", 0);
	set_func_cmt(0x00835280, "CM2Lighting::SetupSunlight()", 0);
	set_func_cmt(0x008353D0, "CM2Lighting::SetupGxLights(C3Vector const*)", 0);
	set_func_cmt(0x008355D0, "CM2Lighting::GetSunLight(C3Vector&, C3Vector&, C3Vector&, C3Vector&)", 0);
	set_func_cmt(0x00835640, "CM2Light::SetLightType(M2LIGHTTYPE)", 0);
	set_func_cmt(0x00835690, "CM2Light::SetPosition(NTempest::C3Vector const&)", 0);
	set_func_cmt(0x008356F0, "CM2Light::SetVisible(int)", 0);
	set_func_cmt(0x00835970, "CM2Shared::AddRef()", 0);
	set_func_cmt(0x008359C0, "CM2Shared::CallbackWhenLoaded(CM2Model*)", 0);
	set_func_cmt(0x00835A00, "CM2Shared::LoadFailedCallback(CAsyncObject*)", 0);
	set_func_cmt(0x008360A0, "CM2Shared::SetIndices()", 0);
	set_func_cmt(0x008362B0, "CM2Shared::SetVertices(unsigned int)", 0);
	set_func_cmt(0x00836C90, "CM2Shared::GetEffect(M2Batch*)", 0);
	set_func_cmt(0x00837250, "CM2Shared::ConvertTextureValuesToCombos()", 0);
	set_func_cmt(0x008374A0, "CM2Shared::AssignBatchTextureComboIndices()", 0);
	set_func_cmt(0x00837680, "CM2Shared::SubstituteSpecializedShaders()", 0);
	set_func_cmt(0x00837A40, "CM2Shared::InitializeSkinProfile()", 0);
	set_func_cmt(0x00838490, "CM2Shared::FinishLoadingSkinProfile(unsigned int)", 0);
	set_func_cmt(0x0083C5F0, "CM2Shared::CM2Shared(CM2Cache*)", 0);
	set_func_cmt(0x0083C6E0, "CM2Shared::InitLowPrioritySequence(unsigned int, unsigned char*, unsigned int)", 0);
	set_func_cmt(0x0083CA90, "CM2Shared::FinishLoadingLowPrioritySequence(unsigned int, CAsyncObject*)", 0);
	set_func_cmt(0x0083CB10, "CM2Shared::SkinProfileLoadedCallback(void*)", 0);
	set_func_cmt(0x0083CB40, "CM2Shared::LoadSkinProfile(unsigned int)", 0);
	set_func_cmt(0x0083CC80, "CM2Shared::Initialize()", 0);
	set_func_cmt(0x0083D340, "CM2Shared::LoadSucceededCallback(CAsyncObject*)", 0);
	set_func_cmt(0x0083D410, "CM2Shared::Load(SFile*, int, CAaBox*)", 0);
	set_func_cmt(0x0083D510, "CM2Shared::CancelAllDeferredSequences()", 0);
	set_func_cmt(0x0083D5B0, "CM2Shared::~CM2Shared()", 0);
	set_func_cmt(0x0083D840, "CM2Shared::LowPrioritySequenceLoadedCallback(void*)", 0);
	set_func_cmt(0x0083D9F0, "CM2Shared::LowPrioritySequenceFailedCallback(void*)", 0);
	set_func_cmt(0x0083DA10, "CM2Shared::LoadLowPrioritySequence(unsigned short)", 0);
	set_func_cmt(0x0083DC90, "CM2Shared::Release()", 0);
	set_func_cmt(0x0086B9A0, "OsGetProcessorFeaturesEx(int&)", 0);
	set_func_cmt(0x0086BBA0, "Invented name", 0);
	set_func_cmt(0x0086E200, "00005410", 0);
	set_func_cmt(0x0086F5F0, "00005410", 0);
	set_func_cmt(0x008728C0, "CShaderEffect::InitFixedFuncPass(EGxTexOp const*, EGxTexOp const*, unsigned int)", 0);
	set_func_cmt(0x00872AD0, "CShaderEffect::SetUsePcfFiltering(unsigned int)", 0);
	set_func_cmt(0x00872B00, "CShaderEffect::UpdateWorldViewMatrix()", 0);
	set_func_cmt(0x00872C10, "CShaderEffect::UpdateProjMatrix()", 0);
	set_func_cmt(0x00872CE0, "CShaderEffect::InitShaderSystem(int, int)", 0);
	set_func_cmt(0x00872D30, "CShaderEffect::InitEffect(char const*, char const*)", 0);
	set_func_cmt(0x00872F90, "CShaderEffect::SetCurrent()", 0);
	set_func_cmt(0x00873060, "CShaderEffect::SetShaders(unsigned int, unsigned int)", 0);
	set_func_cmt(0x00873160, "CShaderEffect::SetDefaultShaders(unsigned int)", 0);
	set_func_cmt(0x00873210, "CShaderEffect::SetFogParams(float, float, float, CImVector const&)", 0);
	set_func_cmt(0x00873390, "CShaderEffect::SetFogEnabled(int)", 0);
	set_func_cmt(0x00873480, "CShaderEffect::SetTexMtx_Identity(unsigned int)", 0);
	set_func_cmt(0x00873550, "CShaderEffect::SetTexMtx_SphereMap(unsigned int)", 0);
	set_func_cmt(0x00873620, "CShaderEffect::SetTexMtx(C44Matrix const&, unsigned int)", 0);
	set_func_cmt(0x00873900, "CShaderEffect::SetDiffuse(C4Vector const&)", 0);
	set_func_cmt(0x00873A50, "CShaderEffect::SetEmissive(C4Vector const&)", 0);
	set_func_cmt(0x00873BA0, "CShaderEffect::SetAlphaRef(float)", 0);
	set_func_cmt(0x00873CA0, "CShaderEffect::SetLocalLighting(CM2Lighting*, int, C3Vector const*)", 0);
	set_func_cmt(0x00873FE0, "CShadowCache::NotifyTexturesRecreate()", 0);
	set_func_cmt(0x008744E0, "CShadowCache::SetShadowMapGenericGlobal()", 0);
	set_func_cmt(0x008745D0, "CShadowCache::SetShadowMapGenericInterior(int)", 0);
	set_func_cmt(0x00876530, "CShaderEffectManager::GetEffect(char const*)", 0);
	set_func_cmt(0x00876BE0, "CShaderEffectManager::CreateEffect(char const*)", 0);
	set_func_cmt(0x00876CA0, "CShaderEffectManager::ParseEffectCallback(CShaderEffectParser::ParsedEffect const&, void*)", 0);
	set_func_cmt(0x00876D90, "CShaderEffectManager::AddEffectFile(char const*)", 0);
	set_func_cmt(0x008A1420, "known names: System_File::Shutdown, CVGxVideoOptionsVersionCallback", 0);
	set_func_cmt(0x008C8DE0, "Known names: GxDefaultApi, CCommand_Perf", 0);
	set_func_cmt(0x008CA0B0, "GruntLogin::Connected(NETADDR const&)", 0);
	set_func_cmt(0x008CA140, "GruntLogin::CantConnect()", 0);
	set_func_cmt(0x008CA260, "GruntLogin::GetVersionProof(unsigned char const*)", 0);
	set_func_cmt(0x008CA360, "GruntLogin::SetPinInfo(bool, unsigned int, unsigned char const*)", 0);
	set_func_cmt(0x008CA400, "GruntLogin::SetTokenInfo(bool, unsigned char)", 0);
	set_func_cmt(0x008CA450, "GruntLogin::ProveVersion(unsigned char const*)", 0);
	set_func_cmt(0x008CA4F0, "GruntLogin::NextSecurityState(LOGIN_STATE)", 0);
	set_func_cmt(0x008CA580, "GruntLogin::GetLogonMethod()", 0);
	set_func_cmt(0x008CA700, "GruntLogin::Reconnect()", 0);
	set_func_cmt(0x008CA730, "GruntLogin::GetRealmList()", 0);
	set_func_cmt(0x008CA740, "GruntLogin::Logon(char const*, char const*)", 0);
	set_func_cmt(0x008CA7F0, "GruntLogin::Wait(char const*, LoginData&)", 0);
	set_func_cmt(0x008CA880, "GruntLogin::EnterPIN(int, unsigned char*)", 0);
	set_func_cmt(0x008CAC00, "GruntLogin::GetVersionChallenge()", 0);
	set_func_cmt(0x008CAC50, "GruntLogin::Init(LoginResponse*)", 0);
	set_func_cmt(0x008CACA0, "GruntLogin::GruntLogin()", 0);
	set_func_cmt(0x008CAD20, "GruntLogin::Logoff()", 0);
	set_func_cmt(0x008CAD40, "GruntLogin::SetMatrixInfo(bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, unsigned char, unsigned long long, unsigned char const*, unsigned int)", 0);
	set_func_cmt(0x008CB020, "GruntLogin::ReconnectResult(Grunt::Result, unsigned char const*, unsigned int, unsigned short)", 0);
	set_func_cmt(0x008CB160, "GruntLogin::LogonResult(Grunt::Result, unsigned char const*, unsigned int, unsigned short)", 0);
	set_func_cmt(0x008CBA40, "00005410", 0);
	set_func_cmt(0x008CBA90, "Grunt::ClientLink::Shutdown()", 0);
	set_func_cmt(0x008CBAE0, "Grunt::ClientLink::Disconnect()", 0);
	set_func_cmt(0x008CBB10, "00005410", 0);
	set_func_cmt(0x008CBB40, "Grunt::ClientLink::Connect(char const*)", 0);
	set_func_cmt(0x008CC250, "Grunt::ClientLink::CmdRealmList(CDataStore&)", 0);
	set_func_cmt(0x008CC3E0, "Grunt::ClientLink::CmdAuthLogonChallenge(CDataStore&)", 0);
	set_func_cmt(0x008CC7A0, "Grunt::ClientLink::CmdAuthLogonProof(CDataStore&)", 0);
	set_func_cmt(0x008CC980, "Grunt::ClientLink::CmdAuthReconnectChallenge(CDataStore&)", 0);
	set_func_cmt(0x008CCA50, "Grunt::ClientLink::CmdAuthReconnectProof(CDataStore&)", 0);
	set_func_cmt(0x008CCB40, "Grunt::ClientLink::CmdXferInitiate(CDataStore&)", 0);
	set_func_cmt(0x008CCC20, "Grunt::ClientLink::CmdXferData(CDataStore&)", 0);
	set_func_cmt(0x008CCCB0, "Grunt::ClientLink::WCConnected(WowConnection*, WowConnection*, unsigned long, NETCONNADDR const*)", 0);
	set_func_cmt(0x008CCD40, "Grunt::ClientLink::WCDisconnected(WowConnection*, unsigned long, NETCONNADDR const*)", 0);
	set_func_cmt(0x008CCDA0, "Grunt::ClientLink::WCCantConnect(WowConnection*, unsigned long, NETCONNADDR const*)", 0);
	set_func_cmt(0x008CCE00, "Grunt::ClientLink::PackLogon(CDataStore&, Grunt::ClientLink::Logon const&)", 0);
	set_func_cmt(0x008CD710, "Grunt::ClientLink::WCDataReady(WowConnection*, unsigned long, unsigned char*, int)", 0);
	set_func_cmt(0x008CD7E0, "Grunt::ClientLink::LogonNewSession(Grunt::ClientLink::Logon const&)", 0);
	set_func_cmt(0x008CD9F0, "Grunt::ClientLink::LogonStoredSession(Grunt::ClientLink::Logon const&)", 0);
	set_func_cmt(0x008CE0F0, "Grunt::ClientLink::GetRealmList()", 0);
	set_func_cmt(0x008CE5C0, "Grunt::Timer::Insert(Grunt::Timer::Event&)", 0);
	set_func_cmt(0x008CE720, "Grunt::ClientLink::ProveVersion(unsigned char const*)", 0);
	set_func_cmt(0x008CED90, "Grunt::Timer::Pump()", 0);
	set_func_cmt(0x008CF600, "Grunt::ClientLink::Call()", 0);
	set_func_cmt(0x008CF770, "Grunt::Timer::ThreadProc(void*)", 0);
	set_func_cmt(0x008CF7A0, "Grunt::Timer::Timer()", 0);
	set_func_cmt(0x008CF800, "Grunt::ClientLink::ClientLink(Grunt::ClientResponse&)", 0);
	set_func_cmt(0x008E5250, "known names Script_ToggleTris, CLayoutFrame::IsAttachmentOrigin()", 0);
	set_func_cmt(0x0095D110, "CDataAllocator::GetData(int, char const*, int)", 0);
	set_func_cmt(0x0095D1B0, "CDataAllocator::PutData(void*, char const*, int)", 0);
	set_func_cmt(0x00962F90, "DeleteSubString(int, int, int)", 0);
	set_func_cmt(0x00963140, "HighlightText(int, int)", 0);
	set_func_cmt(0x009650E0, "FontUpdated(CSimpleFontedFrameFont*, int)", 0);
	set_func_cmt(0x009656D0, "OnFrameSizeChanged(float, float)", 0);
	set_func_cmt(0x00965960, "Insert(char const*, char const*, int, int, int)", 0);
	set_func_cmt(0x00965F20, "SetMultiLine(int)", 0);
	set_func_cmt(0x00966580, "SetText(char const*, char const*)", 0);
	set_func_cmt(0x00966FD0, "SetHistoryLines(int)", 0);
	set_func_cmt(0x00967290, "LoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x0096B060, "CSimpleScrollFrame::UnparentFrame(CSimpleFrame*)", 0);
	set_func_cmt(0x0096B1C0, "void __thiscall CSimpleScrollFrame::UpdateScrollChild(void)", 0);
	set_func_cmt(0x0096B210, "CSimpleScrollFrame::OnFrameSizeChanged(float, float)", 0);
	set_func_cmt(0x0096B2D0, "CSimpleScrollFrame::CSimpleScrollFrame(CSimpleFrame*)", 0);
	set_func_cmt(0x0096B3A0, "CSimpleScrollFrame::SetScrollChild(CSimpleFrame*)", 0);
	set_func_cmt(0x0096B480, "CSimpleScrollFrame::SetVerticalScroll(float)", 0);
	set_func_cmt(0x0096B4C0, "CSimpleScrollFrame::UpdateScrollChildRect(float, float)", 0);
	set_func_cmt(0x0096B5A0, "CSimpleScrollFrame::OnLayerUpdate(float)", 0);
	set_func_cmt(0x0096B610, "CSimpleScrollFrame::RenderScrollChild(void*)", 0);
	set_func_cmt(0x0096B920, "CSimpleScrollFrame::LoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x0096B9A0, "CSimpleScrollFrame::OnFrameRender(CRenderBatch*, unsigned int)", 0);
	set_func_cmt(0x0096B9D0, "CSimpleScrollFrame::GetBoundsRect(CRect&)", 0);
	set_func_cmt(0x0096BE50, "CSimpleSlider::CSimpleSlider(CSimpleFrame*)", 0);
	set_func_cmt(0x0096BF00, "CSimpleSlider::IsA(int) const", 0);
	set_func_cmt(0x0096C090, "CSimpleSlider::SetValue(float, bool)", 0);
	set_func_cmt(0x0096C470, "CSimpleSlider::SetMinMaxValues(float, float)", 0);
	set_func_cmt(0x0096C750, "CSimpleHTML::FontUpdated(CSimpleFontedFrameFont*, int)", 0);
	set_func_cmt(0x0096C820, "CSimpleHTML::CSimpleHTML(CSimpleFrame*)", 0);
	set_func_cmt(0x0096C960, "CSimpleHTML::IsA(int) const", 0);
	set_func_cmt(0x0096C9E0, "CSimpleHTML::ParseIMG(XMLNode const*, CStatus*)", 0);
	set_func_cmt(0x0096CC90, "CSimpleHTML::AddText(char const*, HTML_TEXT_TYPE, unsigned int)", 0);
	set_func_cmt(0x0096D090, "CSimpleHTML::ClearContent()", 0);
	set_func_cmt(0x0096D170, "CSimpleHTML::ParseP(XMLNode const*, HTML_TEXT_TYPE, CStatus*)", 0);
	set_func_cmt(0x0096D740, "CSimpleHTML::ParseBODY(XMLNode const*, CStatus*)", 0);
	set_func_cmt(0x0096D890, "CSimpleHTML::SetText(char const*, CStatus*)", 0);
	set_func_cmt(0x0096DA40, "CSimpleHTML::LoadXML(XMLNode*, CStatus*)", 0);
	set_func_cmt(0x00971A40, "CSimpleSlider::RegisterScriptMethods(lua_State*)", 0);
	set_func_cmt(0x00972560, "CSimpleScrollFrame_SetVerticalScroll(lua_State*)", 0);
	set_func_cmt(0x00977A70, "CSimpleButton_SetStateTexture(lua_State*, CSimpleButtonState, char const*)", 0);
	set_func_cmt(0x00977C70, "CSimpleButton_SetNormalTexture(lua_State*)", 0);
	set_func_cmt(0x00978900, "CSimpleHyperlinkedFrame::CSimpleHyperlinkedFrame(CSimpleFrame*)", 0);
	set_func_cmt(0x00978B30, "CParticleEmitter2::SetModel(CM2Scene*, char const*)", 0);
	set_func_cmt(0x00978BF0, "CParticleEmitter2::SetMaterial(CParticleMat const&, CTexture*)", 0);
	set_func_cmt(0x00978C70, "CParticleEmitter2::SetTextureDimensions(unsigned int, unsigned int)", 0);
	set_func_cmt(0x00978D00, "CParticleEmitter2::SetParticleStyle(int, int, float, int)", 0);
	set_func_cmt(0x00978DD0, "CParticleEmitter2::SetFollowParams(float, float, float, float)", 0);
	set_func_cmt(0x00978E30, "CParticleEmitter2::SetChooseRandomTexture(int)", 0);
	set_func_cmt(0x009791E0, "CParticleEmitter2::Destroy()", 0);
	set_func_cmt(0x0097A990, "CParticleEmitter2::SetParticleColors(CImVector const&, CImVector const&, CImVector const&)", 0);
	set_func_cmt(0x0097AB10, "CParticleEmitter2::GetReplacementColors(CImVector&, CImVector&, CImVector&)", 0);
	set_func_cmt(0x0097AC00, "CParticleEmitter2::SetTwinkleScale(CRange const&)", 0);
	set_func_cmt(0x0097AEB0, "CParticleEmitter2::CreateChildEmittersFromModel(CM2Scene*, char const*)", 0);
	set_func_cmt(0x0097D370, "CParticleEmitter2::DetermineIfSimple()", 0);
	set_func_cmt(0x0097E150, "CParticleEmitter2::CParticleEmitter2()", 0);
	set_func_cmt(0x0097F570, "CRibbonEmitter::SetDataEnabled(int)", 0);
	set_func_cmt(0x0097F5F0, "CRibbonEmitter::SetTexSlot(unsigned int)", 0);
	set_func_cmt(0x0097F610, "CRibbonEmitter::SetAbove(float)", 0);
	set_func_cmt(0x0097F620, "CRibbonEmitter::SetBelow(float)", 0);
	set_func_cmt(0x0097F630, "CRibbonEmitter::SetGravity(float)", 0);
	set_func_cmt(0x0097F940, "CRibbonEmitter::SetPos(C44Matrix const&, C3Vector const&, C44Matrix const*)", 0);
	set_func_cmt(0x0097FB60, "CRibbonEmitter::SetColor(float, float, float)", 0);
	set_func_cmt(0x0097FBA0, "CRibbonEmitter::SetAlpha(float)", 0);
	set_func_cmt(0x00980090, "CRibbonEmitter::Update(float, int)", 0);
	set_func_cmt(0x00980630, "CRibbonEmitter::CRibbonEmitter()", 0);
	set_func_cmt(0x009808A0, "CRibbonEmitter::Initialize(float, float, CImVector const&, TSGrowableArray<CTexture*> const&, TSGrowableArray<CRibbonMat> const&, TSGrowableArray<unsigned int> const&, CAaRect const&, unsigned int, unsigned int)", 0);
	set_func_cmt(0x00981310, "CPlaneParticleEmitter::CPlaneParticleEmitter()", 0);
	set_func_cmt(0x009813F0, "CSphereParticleEmitter::CSphereParticleEmitter()", 0);
	set_func_cmt(0x00981500, "CSplineParticleEmitter::SetSpline(C3Vector const*, unsigned int)", 0);
	set_func_cmt(0x009820F0, "CSplineParticleEmitter::CSplineParticleEmitter()", 0);
	set_func_cmt(0x00982460, "C4Quaternion::Slerp(float, C4Quaternion const&, C4Quaternion const&)", 0);
	set_func_cmt(0x00982630, "C4Quaternion::Nlerp(float, C4Quaternion const&, C4Quaternion const&)", 0);
	set_func_cmt(0x00982970, "C3Vector::C3Vector(CImVector const&)", 0);
	set_func_cmt(0x00984C90, "C4Vector::C4Vector(CImVector const&)", 0);
	set_func_cmt(0x009A8300, "SRP6_Client::BeginAuthentication(char const*, char const*)", 0);
	set_func_cmt(0x009A83E0, "SRP6_Client::CalculateProof(unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, unsigned char const*, unsigned int, SRP6_Random&)", 0);
	set_func_cmt(0x009A88C0, "SRP6_Client::VerifyServerProof(unsigned char const*, unsigned int)", 0);
	set_func_cmt(0x009A8980, "SRP6_Random::SRP6_Random(void const*, unsigned int)", 0);
	set_func_cmt(0x009A89F0, "SRP6_Random::GenerateRandomBytes(unsigned char*, unsigned int)", 0);
	set_func_cmt(0x009A8AA0, "BigIntegerFromInt(unsigned int)", 0);
	set_func_cmt(0x009A8AD0, "BigIntegerFromBytes(unsigned char const*, int)", 0);
	set_func_cmt(0x009A8B00, "BigIntegerToBytes(void*, unsigned char*, unsigned int)", 0);
	set_func_cmt(0x009A8B40, "BigIntegerCmp(void*, void*)", 0);
	set_func_cmt(0x009A8B60, "BigIntegerCmpInt(void*, unsigned int)", 0);
	set_func_cmt(0x009A8BA0, "BigIntegerAdd(void*, void*, void*)", 0);
	set_func_cmt(0x009A8BC0, "BigIntegerAddInt(void*, void*, unsigned int)", 0);
	set_func_cmt(0x009A8C00, "BigIntegerSub(void*, void*, void*)", 0);
	set_func_cmt(0x009A8C20, "BigIntegerMul(void*, void*, void*)", 0);
	set_func_cmt(0x009A8C40, "BigIntegerMod(void*, void*, void*)", 0);
	set_func_cmt(0x009A8C60, "BigIntegerModExp(void*, void*, void*, void*)", 0);
	set_func_cmt(0x009A8C80, "BigIntegerFree(void*)", 0);
	set_func_cmt(0x009A8C90, "BigIntegerBitLen(void*)", 0);
}
